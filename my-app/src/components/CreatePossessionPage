import React, { useState } from 'react';
import { Container, Form, Button, Alert } from 'react-bootstrap';
import DatePicker from 'react-datepicker';
import 'react-datepicker/dist/react-datepicker.css';
import axios from 'axios';
import { useNavigate } from 'react-router-dom';

const CreatePossessionPage = () => {
  const [libelle, setLibelle] = useState('');
  const [valeur, setValeur] = useState('');
  const [dateDebut, setDateDebut] = useState(new Date());
  const [taux, setTaux] = useState('');
  const [error, setError] = useState('');
  const navigate = useNavigate();

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (libelle && valeur && dateDebut && taux) {
      try {
        const data = { 
          libelle, 
          valeur: parseFloat(valeur), // Assurez-vous que la valeur est un nombre
          dateDebut: dateDebut.toISOString(), // Convertir la date en ISO String
          taux: parseFloat(taux) 
        };
        
        // Vérifiez l'URL de l'API
        await axios.post('http://localhost:3000/api/possessions', data);
        console.log('Possession créée avec succès');

        // Rediriger vers la liste des possessions
        navigate('/possession');
      } catch (err) {
        console.error('Erreur lors de la création de la possession:', err);
        setError('Erreur lors de la création de la possession.');
      }
    } else {
      setError('Tous les champs doivent être remplis.');
    }
  };

  return (
    <Container>
      <h1>Create Possession</h1>
      {error && <Alert variant="danger">{error}</Alert>}
      <Form onSubmit={handleSubmit}>
        <Form.Group>
          <Form.Label>Libelle</Form.Label>
          <Form.Control 
            type="text" 
            value={libelle} 
            onChange={e => setLibelle(e.target.value)} 
            placeholder="Libelle" 
            required
          />
        </Form.Group>
        <Form.Group>
          <Form.Label>Valeur</Form.Label>
          <Form.Control 
            type="number" 
            value={valeur} 
            onChange={e => setValeur(e.target.value)} 
            placeholder="Valeur" 
            required
            min="0" // Empêche les valeurs négatives
          />
        </Form.Group>
        <Form.Group>
          <Form.Label>Date Début</Form.Label>
          <DatePicker 
            selected={dateDebut} 
            onChange={date => setDateDebut(date)} 
            className="form-control" 
            required
          />
        </Form.Group>
        <Form.Group>
          <Form.Label>Taux</Form.Label>
          <Form.Control 
            type="number" 
            value={taux} 
            onChange={e => setTaux(e.target.value)} 
            placeholder="Taux" 
            step="0.01"
            required
            min="0" // Empêche les valeurs négatives
          />
        </Form.Group>
        <Button type="submit">Create</Button>
      </Form>
    </Container>
  );
};

export default CreatePossessionPage;
